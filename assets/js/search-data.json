{
  
    
        "post0": {
            "title": "Analysis of Google Playstore App Ratings",
            "content": "Import modules . import pandas as pd import numpy as np import matplotlib.pyplot as plt %matplotlib inline . Import data . df = pd.read_csv(&quot;https://raw.githubusercontent.com/DivyaThakur24/GoogleAppRating-DataAnalysis/master/googleplaystore.csv&quot;) . df.head() . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | ART_AND_DESIGN | 4.1 | 159 | 19M | 10,000+ | Free | 0 | Everyone | Art &amp; Design | January 7, 2018 | 1.0.0 | 4.0.3 and up | . 1 Coloring book moana | ART_AND_DESIGN | 3.9 | 967 | 14M | 500,000+ | Free | 0 | Everyone | Art &amp; Design;Pretend Play | January 15, 2018 | 2.0.0 | 4.0.3 and up | . 2 U Launcher Lite – FREE Live Cool Themes, Hide ... | ART_AND_DESIGN | 4.7 | 87510 | 8.7M | 5,000,000+ | Free | 0 | Everyone | Art &amp; Design | August 1, 2018 | 1.2.4 | 4.0.3 and up | . 3 Sketch - Draw &amp; Paint | ART_AND_DESIGN | 4.5 | 215644 | 25M | 50,000,000+ | Free | 0 | Teen | Art &amp; Design | June 8, 2018 | Varies with device | 4.2 and up | . 4 Pixel Draw - Number Art Coloring Book | ART_AND_DESIGN | 4.3 | 967 | 2.8M | 100,000+ | Free | 0 | Everyone | Art &amp; Design;Creativity | June 20, 2018 | 1.1 | 4.4 and up | . df.tail() . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 10836 Sya9a Maroc - FR | FAMILY | 4.5 | 38 | 53M | 5,000+ | Free | 0 | Everyone | Education | July 25, 2017 | 1.48 | 4.1 and up | . 10837 Fr. Mike Schmitz Audio Teachings | FAMILY | 5.0 | 4 | 3.6M | 100+ | Free | 0 | Everyone | Education | July 6, 2018 | 1 | 4.1 and up | . 10838 Parkinson Exercices FR | MEDICAL | NaN | 3 | 9.5M | 1,000+ | Free | 0 | Everyone | Medical | January 20, 2017 | 1 | 2.2 and up | . 10839 The SCP Foundation DB fr nn5n | BOOKS_AND_REFERENCE | 4.5 | 114 | Varies with device | 1,000+ | Free | 0 | Mature 17+ | Books &amp; Reference | January 19, 2015 | Varies with device | Varies with device | . 10840 iHoroscope - 2018 Daily Horoscope &amp; Astrology | LIFESTYLE | 4.5 | 398307 | 19M | 10,000,000+ | Free | 0 | Everyone | Lifestyle | July 25, 2018 | Varies with device | Varies with device | . Inspect data . df.shape . (10841, 13) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 10841 entries, 0 to 10840 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 App 10841 non-null object 1 Category 10841 non-null object 2 Rating 9367 non-null float64 3 Reviews 10841 non-null object 4 Size 10841 non-null object 5 Installs 10841 non-null object 6 Type 10840 non-null object 7 Price 10841 non-null object 8 Content Rating 10840 non-null object 9 Genres 10841 non-null object 10 Last Updated 10841 non-null object 11 Current Ver 10833 non-null object 12 Android Ver 10838 non-null object dtypes: float64(1), object(12) memory usage: 1.1+ MB . df.describe() . Rating . count 9367.000000 | . mean 4.193338 | . std 0.537431 | . min 1.000000 | . 25% 4.000000 | . 50% 4.300000 | . 75% 4.500000 | . max 19.000000 | . df.boxplot() # Rough plot of unclean data...only numeric column is Ratings . &lt;AxesSubplot:&gt; . df.hist() . array([[&lt;AxesSubplot:title={&#39;center&#39;:&#39;Rating&#39;}&gt;]], dtype=object) . Data Cleaning . Remove outliers from initial plot . df[df.Rating &gt; 5] . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 10472 Life Made WI-Fi Touchscreen Photo Frame | 1.9 | 19.0 | 3.0M | 1,000+ | Free | 0 | Everyone | NaN | February 11, 2018 | 1.0.19 | 4.0 and up | NaN | . df.drop([10472],inplace=True) . df[10470:10475] . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 10470 Jazz Wi-Fi | COMMUNICATION | 3.4 | 49 | 4.0M | 10,000+ | Free | 0 | Everyone | Communication | February 10, 2017 | 0.1 | 2.3 and up | . 10471 Xposed Wi-Fi-Pwd | PERSONALIZATION | 3.5 | 1042 | 404k | 100,000+ | Free | 0 | Everyone | Personalization | August 5, 2014 | 3.0.0 | 4.0.3 and up | . 10473 osmino Wi-Fi: free WiFi | TOOLS | 4.2 | 134203 | 4.1M | 10,000,000+ | Free | 0 | Everyone | Tools | August 7, 2018 | 6.06.14 | 4.4 and up | . 10474 Sat-Fi Voice | COMMUNICATION | 3.4 | 37 | 14M | 1,000+ | Free | 0 | Everyone | Communication | November 21, 2014 | 2.2.1.5 | 2.2 and up | . 10475 Wi-Fi Visualizer | TOOLS | 3.9 | 132 | 2.6M | 50,000+ | Free | 0 | Everyone | Tools | May 17, 2017 | 0.0.9 | 2.3 and up | . df.isna().sum() . App 0 Category 0 Rating 1474 Reviews 0 Size 0 Installs 0 Type 1 Price 0 Content Rating 0 Genres 0 Last Updated 0 Current Ver 8 Android Ver 2 dtype: int64 . Drop columns with more than 90% missing data . threshold = len(df)*0.1 threshold . 1084.0 . df.dropna(thresh=threshold, axis=1, inplace=True) . df.isna().sum() . App 0 Category 0 Rating 1474 Reviews 0 Size 0 Installs 0 Type 1 Price 0 Content Rating 0 Genres 0 Last Updated 0 Current Ver 8 Android Ver 2 dtype: int64 . Imputation . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10840 entries, 0 to 10840 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 App 10840 non-null object 1 Category 10840 non-null object 2 Rating 9366 non-null float64 3 Reviews 10840 non-null object 4 Size 10840 non-null object 5 Installs 10840 non-null object 6 Type 10839 non-null object 7 Price 10840 non-null object 8 Content Rating 10840 non-null object 9 Genres 10840 non-null object 10 Last Updated 10840 non-null object 11 Current Ver 10832 non-null object 12 Android Ver 10838 non-null object dtypes: float64(1), object(12) memory usage: 1.2+ MB . rating_mean = df[&#39;Rating&#39;].mean() . df[&#39;Rating&#39;].fillna(rating_mean,inplace=True) . #...values[0]...to select first value if column is bimodal df[&#39;Type&#39;].fillna(str(df[&#39;Type&#39;].mode().values[0]),inplace=True) df[&#39;Current Ver&#39;].fillna(str(df[&#39;Current Ver&#39;].mode().values[0]),inplace=True) df[&#39;Android Ver&#39;].fillna(str(df[&#39;Android Ver&#39;].mode().values[0]),inplace=True) . df.isna().sum() . App 0 Category 0 Rating 0 Reviews 0 Size 0 Installs 0 Type 0 Price 0 Content Rating 0 Genres 0 Last Updated 0 Current Ver 0 Android Ver 0 dtype: int64 . Datatype correction . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10840 entries, 0 to 10840 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 App 10840 non-null object 1 Category 10840 non-null object 2 Rating 10840 non-null float64 3 Reviews 10840 non-null object 4 Size 10840 non-null object 5 Installs 10840 non-null object 6 Type 10840 non-null object 7 Price 10840 non-null object 8 Content Rating 10840 non-null object 9 Genres 10840 non-null object 10 Last Updated 10840 non-null object 11 Current Ver 10840 non-null object 12 Android Ver 10840 non-null object dtypes: float64(1), object(12) memory usage: 1.2+ MB . df[&#39;Price&#39;] = df[&#39;Price&#39;].apply(lambda x: str(x).replace(&#39;$&#39;, &#39;&#39;) if &#39;$&#39; in str(x) else str(x)) df[&#39;Price&#39;] = df[&#39;Price&#39;].astype(&#39;float&#39;) . df[&#39;Reviews&#39;] = df[&#39;Reviews&#39;].astype(&#39;int&#39;) . df[&#39;Installs&#39;] = df[&#39;Installs&#39;].apply(lambda x: str(x).replace(&#39;+&#39;, &#39;&#39;) if &#39;+&#39; in str(x) else str(x)) df[&#39;Installs&#39;] = df[&#39;Installs&#39;].apply(lambda x: str(x).replace(&#39;,&#39;, &#39;&#39;) if &#39;,&#39; in str(x) else str(x)) df[&#39;Installs&#39;] = df[&#39;Installs&#39;].astype(&#39;int&#39;) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10840 entries, 0 to 10840 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 App 10840 non-null object 1 Category 10840 non-null object 2 Rating 10840 non-null float64 3 Reviews 10840 non-null int32 4 Size 10840 non-null object 5 Installs 10840 non-null int32 6 Type 10840 non-null object 7 Price 10840 non-null float64 8 Content Rating 10840 non-null object 9 Genres 10840 non-null object 10 Last Updated 10840 non-null object 11 Current Ver 10840 non-null object 12 Android Ver 10840 non-null object dtypes: float64(2), int32(2), object(9) memory usage: 1.1+ MB . Data Visualisation . grp = df.groupby(&#39;Category&#39;) x = grp[&#39;Rating&#39;].agg(np.mean) y = grp[&#39;Price&#39;].agg(np.sum) #...more preferable to find sum of price / category than average price / category z = grp[&#39;Reviews&#39;].agg(np.mean) print(x) print(y) print(z) . Category ART_AND_DESIGN 4.350389 AUTO_AND_VEHICLES 4.190601 BEAUTY 4.260553 BOOKS_AND_REFERENCE 4.310663 BUSINESS 4.145448 COMICS 4.156392 COMMUNICATION 4.163601 DATING 4.007601 EDUCATION 4.387768 ENTERTAINMENT 4.126174 EVENTS 4.363178 FAMILY 4.192214 FINANCE 4.138922 FOOD_AND_DRINK 4.170485 GAME 4.282441 HEALTH_AND_FITNESS 4.266092 HOUSE_AND_HOME 4.196603 LIBRARIES_AND_DEMO 4.181590 LIFESTYLE 4.112145 MAPS_AND_NAVIGATION 4.064911 MEDICAL 4.189781 NEWS_AND_MAGAZINES 4.142713 PARENTING 4.281960 PERSONALIZATION 4.307288 PHOTOGRAPHY 4.192094 PRODUCTIVITY 4.208015 SHOPPING 4.253918 SOCIAL 4.247808 SPORTS 4.218136 TOOLS 4.066075 TRAVEL_AND_LOCAL 4.119520 VIDEO_PLAYERS 4.074722 WEATHER 4.239540 Name: Rating, dtype: float64 Category ART_AND_DESIGN 5.97 AUTO_AND_VEHICLES 13.47 BEAUTY 0.00 BOOKS_AND_REFERENCE 119.77 BUSINESS 185.27 COMICS 0.00 COMMUNICATION 83.14 DATING 31.43 EDUCATION 17.96 ENTERTAINMENT 7.98 EVENTS 109.99 FAMILY 2434.78 FINANCE 2900.83 FOOD_AND_DRINK 8.48 GAME 287.30 HEALTH_AND_FITNESS 67.34 HOUSE_AND_HOME 0.00 LIBRARIES_AND_DEMO 0.99 LIFESTYLE 2360.87 MAPS_AND_NAVIGATION 26.95 MEDICAL 1439.96 NEWS_AND_MAGAZINES 3.98 PARENTING 9.58 PERSONALIZATION 153.96 PHOTOGRAPHY 134.21 PRODUCTIVITY 250.93 SHOPPING 5.48 SOCIAL 15.97 SPORTS 100.00 TOOLS 267.25 TRAVEL_AND_LOCAL 49.95 VIDEO_PLAYERS 10.46 WEATHER 32.42 Name: Price, dtype: float64 Category ART_AND_DESIGN 2.637600e+04 AUTO_AND_VEHICLES 1.369019e+04 BEAUTY 7.476226e+03 BOOKS_AND_REFERENCE 9.506090e+04 BUSINESS 3.033598e+04 COMICS 5.638793e+04 COMMUNICATION 2.107138e+06 DATING 3.115931e+04 EDUCATION 2.538191e+05 ENTERTAINMENT 3.971688e+05 EVENTS 2.515906e+03 FAMILY 2.080255e+05 FINANCE 4.795281e+04 FOOD_AND_DRINK 6.994748e+04 GAME 1.385859e+06 HEALTH_AND_FITNESS 1.111253e+05 HOUSE_AND_HOME 4.518619e+04 LIBRARIES_AND_DEMO 1.220139e+04 LIFESTYLE 3.372457e+04 MAPS_AND_NAVIGATION 2.237902e+05 MEDICAL 3.425432e+03 NEWS_AND_MAGAZINES 1.922292e+05 PARENTING 1.597218e+04 PERSONALIZATION 2.279238e+05 PHOTOGRAPHY 6.373631e+05 PRODUCTIVITY 2.691438e+05 SHOPPING 4.424662e+05 SOCIAL 2.105903e+06 SPORTS 1.844536e+05 TOOLS 3.240629e+05 TRAVEL_AND_LOCAL 2.427051e+05 VIDEO_PLAYERS 6.307439e+05 WEATHER 1.781065e+05 Name: Reviews, dtype: float64 . plt.figure(figsize=(16,7)) plt.plot(x, &#39;ro&#39;) plt.xticks(rotation=90) plt.title(&#39;Rating versus Category&#39;) plt.xlabel(&#39;Category&#39;) plt.ylabel(&#39;Rating&#39;) plt.show() . plt.figure(figsize=(16,7)) plt.plot(y, &#39;b^&#39;) plt.xticks(rotation=90) plt.title(&#39;Price versus Category&#39;) plt.xlabel(&#39;Category&#39;) plt.ylabel(&#39;Price&#39;) plt.show() . plt.figure(figsize=(16,7)) plt.plot(z, &#39;g--&#39;) plt.xticks(rotation=90) plt.title(&#39;Installs versus Category&#39;) plt.xlabel(&#39;Category&#39;) plt.ylabel(&#39;Installs&#39;) plt.show() .",
            "url": "https://lachlanlay.com/port/2022/02/08/Google-Playstore-Ratings.html",
            "relUrl": "/2022/02/08/Google-Playstore-Ratings.html",
            "date": " • Feb 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lachlanlay.com/port/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lachlanlay.com/port/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is sample text. I am blah blah .",
          "url": "https://lachlanlay.com/port/port/",
          "relUrl": "/port/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Contact",
          "content": "This is how and where you can contact me. .",
          "url": "https://lachlanlay.com/port/contact/",
          "relUrl": "/contact/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lachlanlay.com/port/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}